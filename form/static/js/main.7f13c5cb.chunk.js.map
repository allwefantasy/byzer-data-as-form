{"version":3,"sources":["service/backend/RestConst.js","service/Dicts.js","service/backend/Backend.js","service/RemoteAction.js","service/ActionProxy.js","components/api_form/Warning.js","components/BaseReactComp/BaseComp.js","components/api_form/DynamicAddInput.js","components/api_form/autogens/AutoGenForm.js","utils/Utils.js","components/api_form/autogens/AutoGenBaseComp.js","components/api_form/autogens/AutoGenInput.js","components/api_form/autogens/AutoGenSelect.js","components/api_form/autogens/AutoGenCheckBox.js","components/api_form/autogens/AutoGenTreeView2.js","components/api_form/autogens/AutoGenDynamic.js","components/api_form/autogens/AutoGenEditor.js","components/api_form/FormElementMapping.js","components/api_form/Form.js","components/api_form/TableView.js","components/APIView.js","components/APIMain.js","components/APINav.js","router/BaseRouter.js","router/APINavSwitcher.js","router/APIViewSwitcher.js","App.js","serviceWorker.js","index.js"],"names":["Method","GET","POST","PUT","DELETE","AccessToken","name","GlobalParamNames","USER_NAME","USER_ID","ADMIN_TOKEN","LOGIN_TOKEN","RestResponse","status","content","this","Backend","url","fetch_config","action","params","property","method","toUpperCase","userName","sessionStorage","getItem","loginToken","formBody","encodedKey","encodeURIComponent","encodedValue","push","newurl","join","undefined","basic_config","timeout","headers","body","final_config","fetch","response","ok","text","error","json","RemoteAction","HELLO","LIST_SCRIPT_FILE","CREATE_SCRIPT_FILE","LIST_ACTIONS","LIST_APINavItems","LIST_APINav","ChooseAPINav","ActionProxy","backend","request","res","Warning","props","warn","title","setState","open","handleClose","state","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","React","Component","BaseComp","Promise","resolve","DynamicAddInput","addItem","value","input","TextField","variant","margin","fullWidth","autoFocus","onChange","evt","form","forms","target","label","wow","elements","concat","popupVisible","handleOk","inputName","handleCancel","popup","newFieldName","visible","onOk","onCancel","AutoGenForm","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","width","submit","back","preventDefault","router","popPage","addParams","dynamicInputRef","instances","item","classes","Container","component","maxWidth","ref","containerRef","CssBaseline","warningRef","className","Avatar","Typography","noValidate","ButtonGroup","aria-label","type","Utils","list","n","length","stepSize","Math","floor","groups","groupNum","range","i","min","setEqual","a","b","temp1","temp2","forEach","indexOf","buildTree","node","tempMap","roots","childNodes","parentId","e","console","log","throttle","fn","wait","timer","setTimeout","args","apply","debounce","delay","clearTimeout","AutoGenBaseComp","addMonitor","monitor","monitors","values","dependencies","collect_dependencies","reload","bind","Set","Array","from","map","proxy","resp","message","AutoGenInput","handleChange","event","AutoGenSelect","select","option","MenuItem","key","AutoGenCheckBox","checked","GreenCheckbox","withStyles","root","green","Checkbox","items","statue","FormControlLabel","control","AutoGenTreeView2","toggleIsExpanded","isExpanded","isRootNode","nodeId","nodes","handleNodeClick","handNodeDoubleClick","handleNodeCollapse","handleNodeExpand","onNodeContextMenu","add","JSON","parse","nodeData","_nodePath","originallySelected","isSelected","shiftKey","forEachNode","callback","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","TreeNodeEnum","DIR","FILE","AutoGenDynamic","subTpe","row","meta","stringify","FormElementMapping","mapping","AutoGenEditor","editorRef","editor","getValue","language","defaultSize","height","onResize","resize","mode","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","autoScrollEditorIntoView","pushInstance","valueProviderName","depends","build","FormBuilder","post","autogen","tpe","TableView","load","data","isArray","maxSize","maxSizeItem","Object","keys","columns","newData","col","index","substring","toString","rows","table","minWidth","tableHeaders","TableCell","tableRows","tableRow","scope","TableRow","TableContainer","Paper","Table","TableHead","TableBody","APIView","v","errorView","view","setItem","ex","builder","setStateSync","inputWithDepends","filter","inputAlonesMap","dep","style","background","handleListItemClick","toPage2","toNav","get","children","ListItem","button","ListItemIcon","ListItemText","primary","List","goToNav","Step","Steps","APINav","openNotificationWithIcon","description","notification","current","steps","apiNavId","bordered","marginBottom","next","success","marginLeft","prev","BaseRouter","app","pages","func","toPage1","pop","page","APINavSwitcher","page1","page2","apiView","APIViewSwitcher","nav","current_action","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f13c5cb.chunk.js","sourcesContent":["export const BACKEND_SERVER = \"\";\nexport const BACKEND_URL = BACKEND_SERVER + \"/run\";\n\n\nexport class Method{\n    static GET = \"get\"\n    static POST = \"post\"\n    static PUT = \"put\"\n    static DELETE  = \"delete\"    \n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n\n","export class LangKey{\n    static firstName = \"firstName\"   \n}\nexport class GlobalParamNames {\n    static USER_NAME = \"userName\"\n    static USER_ID = \"userId\"\n    static ADMIN_TOKEN = \"admin_token\"\n    static LOGIN_TOKEN = \"access-token\"\n}","import {BACKEND_URL,AccessToken} from './RestConst'\nimport { GlobalParamNames } from '../Dicts'\n\nexport class RestResponse {\n    constructor(status,content){\n        this.status = status\n        this.content = content\n    }\n }\n\nexport  class Backend {\n    \n    constructor(url,fetch_config={}){\n        this.url = url      \n        if(!this.url){\n            this.url = BACKEND_URL\n        }\n        this.fetch_config = fetch_config\n      }\n\n    async request(action, params,method=\"GET\") {\n        method = method.toUpperCase();\n        const userName = sessionStorage.getItem(GlobalParamNames.USER_NAME)\n        const loginToken = sessionStorage.getItem(GlobalParamNames.LOGIN_TOKEN)\n        if(userName){\n           params[GlobalParamNames.USER_NAME] = userName\n        }\n\n        if(loginToken){\n            params[GlobalParamNames.LOGIN_TOKEN] = loginToken\n        }\n\n        let formBody = [];\n        for (let property in params) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(params[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }        \n        let newurl = this.url + \"?\" + \"action=\" + action\n\n        if (method === \"GET\") {\n            newurl = newurl + \"&\" + formBody.join(\"&\")\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n\n        const basic_config = {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(AccessToken) || ''\n            },\n            body: formBody\n        }\n\n        const final_config = {...basic_config,...this.fetch_config}\n        \n        try{\n            const response = await fetch(newurl,final_config);\n            if (!response.ok) {\n                const error = await response.text()\n                return new RestResponse(response.status,error);\n              }\n            const json = await response.json();\n            return new RestResponse(200,json);\n        }catch(err){\n            return new RestResponse(500,err);\n        }\n    }\n}\n","export default class RemoteAction{\n    static HELLO = \"hello_world\" \n    static LIST_SCRIPT_FILE= \"listScriptFile\"\n    static CREATE_SCRIPT_FILE= \"createScriptFile\" \n    static LIST_ACTIONS =\"listActions\"\n    static LIST_APINavItems = \"listAPINavItems\"\n    static LIST_APINav = \"listAPINav\"\n    static ChooseAPINav = \"chooseAPINav\"\n\n}","import {RestResponse,Backend} from './backend/Backend'\nimport RemoteAction from './RemoteAction'\nimport {Method,Status} from './backend/RestConst'\n\nexport class UserActionParams {\n  static USERE_NAME = \"userName\"   \n  \n}\nexport class ResponseKey {\n   static SIGH_IN_MAIN_PAGE = \"sighInMainPage\"\n}\n\n\nexport class ActionProxy {\n    constructor(){\n        this.backend = new Backend()        \n    }    \n    async hello(){        \n      const res = await this.backend.request(RemoteAction.HELLO,{},Method.GET)\n      return res\n    }\n\n    /**\n     * \n     * @param {string} action \n     * @param {{}} params \n     * @return {RestResponse}\n     */\n    async get(action,params){\n      const res = await this.backend.request(action,params,Method.GET)\n      return res\n    }\n\n    /**\n     * \n     * @param {string} action \n     * @param {{}} params \n     * @returns {RestResponse}\n     */\n    async post(action,params){        \n        const res = await this.backend.request(action,params,Method.POST)\n        return res\n      }\n}\n\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default class Warning extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {open:false}\n  }\n  warn = (title,content) => {\n    this.setState({open:true,title:title,content:content})\n    \n  }\n  handleClose = () => {\n    this.setState({open:false})\n  };\n  render(){\n  \n  return (\n    <div>      \n      <Dialog\n        open={this.state.open}\n        onClose={this.handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{this.state.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {this.state.content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleClose} color=\"primary\">\n            Close\n          </Button>          \n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n  }\n}","\nimport React from 'react'\n\nexport class BaseComp extends React.Component {\n    setStateSync(state) {\n        return new Promise((resolve) => {\n            this.setState(state, resolve)\n        });\n    }\n}","import React from 'react'\nimport { BaseComp } from \"../BaseReactComp/BaseComp\";\nimport { Modal } from 'antd';\nimport TextField from '@material-ui/core/TextField';\n\nexport class DynamicAddInput extends BaseComp{\n    constructor(props){\n        super(props)\n        this.form = props.form\n        this.state={elements:[],popupVisible:false}        \n    }\n\n    addItem = (name,value)=>{\n        const handleChange = (evt)=>{            \n          this.form.forms[name] = evt.target.value          \n        }\n        const input =  <TextField \n        variant=\"outlined\"\n        margin=\"normal\"            \n        fullWidth                        \n        autoFocus  \n        onChange={handleChange} \n         name={name} label={name}/>\n        const wow = this.state.elements.concat(input)         \n        this.setState({elements:[wow],popupVisible:false})\n    }\n\n    handleOk = ()=>{    \n      this.addItem(this.inputName,\"\")    \n    }\n\n    handleCancel = ()=>{\n      this.setState({popupVisible:false})\n    }\n\n    popup = ()=>{\n        this.setState({popupVisible:true})  \n    }\n\n    newFieldName = (evt)=>{\n       this.inputName = evt.target.value\n    }\n\n    render(){\n        return <div>\n            <Modal\n              title=\"Add New Param\"\n              visible={this.state.popupVisible}\n              onOk={this.handleOk}\n              onCancel={this.handleCancel}\n        >\n        <TextField onChange={this.newFieldName}\n        variant=\"outlined\"\n        margin=\"normal\"            \n        fullWidth                        \n        autoFocus          \n        name=\"fieldName\" label=\"New field name\"/>        \n        </Modal>\n            {this.state.elements}\n        </div>\n    }\n\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Warning from '../Warning'\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { DynamicAddInput } from '../DynamicAddInput';\n\nexport class AutoGenForm {\n\n  constructor(props) {\n    \n    this.action = props.action\n    this.forms = []\n    this.elements = []\n    this.instances = []\n    this.submit = props.submit\n    this.router = props.router\n  }\n\n  useStyles = () => makeStyles(theme => ({\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(1),\n    },\n    submit: {\n      margin: theme.spacing(3, 3, 2),\n    },\n  }));\n\n  push(item) {\n    this.elements.push(item)\n  }\n\n  pushInstance(item) {\n    this.instances.push(item)\n  }\n  back = (evt) => {\n    evt.preventDefault()\n    this.router.popPage()\n  }\n\n  addParams = (evt)=>{\n    evt.preventDefault()\n    this.dynamicInputRef.popup()         \n  }\n  build() {\n    const classes = this.useStyles();\n\n    return (\n\n      <Container component=\"main\" maxWidth=\"xs\" ref={(item) => this.containerRef = item}>\n        <CssBaseline />\n        <div>\n          <Warning ref={(item) => { this.warningRef = item }}></Warning>\n        </div>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            {this.action}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {this.elements}\n            <DynamicAddInput ref={item=>this.dynamicInputRef = item} form={this}></DynamicAddInput>\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n              <Button\n                type=\"submit\"                \n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={this.submit}\n              >\n                Commit\n            </Button>\n              <Button\n                type=\"submit\"                \n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={this.back}\n              >\n                Back\n            </Button>\n            <Button\n                type=\"submit\"                \n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={this.addParams}\n              >\n                Add Params\n            </Button>\n            </ButtonGroup>\n          </form>\n        </div>\n      </Container>\n    );\n  }\n}","export class Utils {\n    \n    \n    static setEqual=(a,b)=>{\n        const temp1 = [...a]\n        const temp2 = [...b]\n        if(temp1.length!==temp2.length) return false\n        let res = true\n        temp1.forEach(item=>{\n             if(temp2.indexOf(item) === -1){\n                 res = false\n             }\n        })\n        return res\n    }\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    static buildTree = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n    /**\n     * example:\n     * \n     * btn.onclick = throttle(function(){\n           console.log(\"button clicked\");\n         }, 500);\n     */\n    static throttle = (fn, wait) => {\n        let timer;\n        return function (...args) {\n            if (!timer) {\n                timer = setTimeout(() => timer = null, wait);\n                return fn.apply(this, args);\n            }\n        }\n    }\n\n    /**\n     * example:\n     * \n     * window.addEventListener(\"scroll\", debounce(function(){\n                console.log(\"scrolled\");\n            }, 500));\n     */\n    static  debounce = (fn, delay)=>{    \n        var timer = null;    \n        return function(...args){\n          clearTimeout(timer);\n          timer = setTimeout(() => fn.apply(this, args), delay);\n        }\n      }\n    /**\n       * \n       * @param {Array} list \n       * @param {Number} n\n       */\n    static splitListToNGroup(list, n) {\n        if (list.length === 0) return [list]\n        if (list.length <= n) return [list]\n\n        let stepSize = Math.floor(list.length / n)\n        if (stepSize < list.length / n) {\n            stepSize = stepSize + 1\n        }\n        const groups = []\n\n        for (var groupNum = 0; groupNum < n; groupNum++) {\n            const range = []\n            for (var i = (groupNum * stepSize); i < Math.min(((groupNum + 1) * stepSize), list.length); i++) {\n                range.push(list[i])\n            }\n            if (range.length > 0) {\n                groups.push(range)\n            }\n\n        }\n        return groups\n    }\n\n    /**\n     * \n     * @param {Array} list \n     * @param {Number} n\n     */\n    static splitListToNGroupByStepSize(list, stepSize) {\n        if (list.length === 0) return [list]\n        if (list.length <= stepSize) return [list]\n\n        let n = Math.floor(list.length / stepSize)\n        if (n < list.length / stepSize) {\n            n = n + 1\n        }\n        const groups = []\n\n        for (var groupNum = 0; groupNum < n; groupNum++) {\n            const range = []\n            for (var i = (groupNum * stepSize); i < Math.min(((groupNum + 1) * stepSize), list.length); i++) {\n                range.push(list[i])\n            }\n            if (range.length > 0) {\n                groups.push(range)\n            }\n\n        }\n        return groups\n    }\n}","import { BaseComp } from \"../../BaseReactComp/BaseComp\";\nimport { ActionProxy } from \"../../../service/ActionProxy\";\nimport { Utils } from \"../../../utils/Utils\";\nimport { message } from 'antd';\n\nexport class AutoGenBaseComp extends BaseComp {\n   /**\n     * \n     * @param {form:AutoGenForm,name:string,values:[],dependencies:[],action:string} props\n     */\n    constructor(props){\n        super(props)\n        this.form = props.form\n        this.name = props.name                        \n        this.state = {values:props.values}\n\n        this.forms = this.form.forms                        \n        this.monitors = []\n        this.dependencies = props.dependencies\n        this.collect_dependencies = []\n        this.action = props.action\n\n        this.reload = this.reload.bind(this)\n      }\n\n      async reload (input){\n        this.collect_dependencies.push(input)        \n        const temp1 = new Set(Array.from(this.collect_dependencies).map(item => item.name))\n        const temp2 = new Set(this.dependencies)\n        \n        \n        if(Utils.setEqual(temp1,temp2)){          \n          const proxy = new ActionProxy()\n          const params = {}\n          this.dependencies.forEach(item=>params[item]=this.forms[item])          \n          const resp = await proxy.backend.request(this.action,params,\"POST\")\n          if(resp.status === 200){\n            this.setState({values:resp.content})\n          }else {\n            message.error(resp.content,6);\n          }          \n        }\n      }\n\n      addMonitor=(monitor)=>{\n        this.monitors.push(monitor)\n      }\n}","import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { AutoGenBaseComp } from './AutoGenBaseComp';\n\n\nexport class AutoGenInput extends AutoGenBaseComp{\n    /**\n     * \n     * @param {AutoGenForm} form \n     */\n    constructor(props){\n        super(props)\n      }\n      \n      handleChange = (event)=>{    \n        this.forms[this.name]=event.target.value        \n        this.monitors.forEach(monitor=>monitor.reload(this))\n      }\n\n      render(){        \n        return (\n            \n            <TextField \n            variant=\"outlined\"\n            margin=\"normal\"            \n            fullWidth                        \n            autoFocus  \n            onChange={this.handleChange}          \n            form={this.form} name={this.name} label={this.name} />\n                      \n        );\n      }\n}","import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { AutoGenBaseComp } from './AutoGenBaseComp';\n\nexport class AutoGenSelect extends AutoGenBaseComp{\n    /**\n   * \n   * @param {AutoGenForm} form \n   */\n    constructor(props) {\n        super(props)\n    }\n    \n    handleChange = (event)=>{    \n      this.forms[this.name]=event.target.value\n      this.monitors.forEach(monitor=>monitor.reload(this))\n    }\n    \n\n    render() {\n        return (\n            <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                autoFocus\n                id=\"standard-select-currency\"\n                name={this.name}\n                select\n                label={this.name}\n                onChange={this.handleChange}\n            >\n                {this.state.values.map(option => (\n                    <MenuItem key={option.name} value={option.value}>\n                        {option.name}\n                    </MenuItem>\n                ))}\n            </TextField>\n\n        );\n    }\n}","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { AutoGenBaseComp } from './AutoGenBaseComp';\n\n\nexport class AutoGenCheckBox extends AutoGenBaseComp{    \n    constructor(props){\n        super(props)        \n      }\n      \n      handleChange = (event)=>{    \n        this.forms[this.name]=event.target.checked\n        this.monitors.forEach(monitor=>monitor.reload(this))\n      }\n\n      render(){\n        const GreenCheckbox = withStyles({\n            root: {\n              color: green[400],\n              '&$checked': {\n                color: green[600],\n              },\n            },\n            checked: {},\n          })(props => <Checkbox color=\"default\" {...props} />);\n        const items = this.statue.values.map(item=>{\n            return <FormControlLabel\n        control={\n          <GreenCheckbox            \n            onChange={this.handleChange}\n            value={item}\n          />\n        }\n        label={item}\n      />\n        })\n        return <div>{items}</div>\n\n      }\n}","import React from 'react';\nimport {Tree} from \"@blueprintjs/core\";\nimport { Utils } from '../../../utils/Utils';\nimport { ActionProxy } from '../../../service/ActionProxy';\n\n\n\nexport class AutoGenTreeView2 extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.form = props.form\n        this.name = props.name\n        this.forms = this.form.forms\n        this.json = props.json        \n        const nodes = Utils.buildTree(this.json)\n        this.state = { nodes: nodes }\n        this.dependencies = props.dependencies\n        this.action = props.action\n\n\n        this.monitors = []\n        this.dependencies = props.dependencies\n        this.collect_dependencies = new Set()\n\n\n        this.reload = this.reload.bind(this)       \n        this.handleNodeClick = this.handleNodeClick.bind(this)\n        this.handNodeDoubleClick = this.handNodeDoubleClick.bind(this)\n        this.handleNodeCollapse = this.handleNodeCollapse.bind(this)\n        this.handleNodeExpand = this.handleNodeExpand.bind(this)\n        this.onNodeContextMenu = this.onNodeContextMenu.bind(this)\n    }\n\n    async reload(input) {        \n        this.collect_dependencies.add(input)\n        const temp1 = new Set(Array.from(this.collect_dependencies).map(item => item.name))\n        const temp2 = new Set(this.dependencies)\n                \n        if (Utils.setEqual(temp1,temp2)) {            \n            const proxy = new ActionProxy()\n            const params = {}\n            this.dependencies.forEach(item => params[item] = this.forms[item])            \n            const resp = await proxy.backend.request(this.action, params) \n            if(resp.status === 200){\n                const nodes = Utils.buildTree(JSON.parse(resp.content[0].value))\n                this.setState({nodes:nodes})\n            }\n            \n        }\n    }\n\n    async handleNodeClick(nodeData, _nodePath, e){          \n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n        \n        this.forms[this.name]= nodeData.id\n        this.monitors.forEach(monitor=>monitor.reload(this))\n    } \n\n    async handNodeDoubleClick(nodeData, _nodePath, e){        \n        this.forms[this.name]= nodeData.id\n        this.monitors.forEach(monitor=>monitor.reload(this))\n    }\n\n    async handleNodeCollapse(nodeData){        \n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state); \n    }\n\n    async handleNodeExpand(nodeData){\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state); \n    }\n\n    async onNodeContextMenu(node, _nodePath, e){\n\n    }\n\n    toggleIsExpanded = (id, isExpanded) => {\n       \n    }\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    addMonitor = (monitor) => {\n        this.monitors.push(monitor)\n    }\n\n    render() {\n            \n        return (\n            <div>                \n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}                    \n                />                \n            </div>\n        );\n    }\n}\n\nclass TreeNodeEnum {\n    static DIR = 1\n    static FILE = 2\n}","import React from \"react\"\nimport { AutoGenBaseComp } from \"./AutoGenBaseComp\"\nimport { FormElementMapping } from \"../FormElementMapping\"\n\nexport class AutoGenDynamic extends AutoGenBaseComp{\n    constructor(props){\n        super(props)\n        this.subTpe = props.subTpe \n        this.row = props.row       \n    }\n    build() {     \n        let meta = {name:this.name,values:[]}    \n        if(this.subTpe === \"TreeSelect\"){\n            meta = {name:this.name,json:JSON.stringify([{values:[]}])}    \n        }\n\n        let element = undefined\n        if(this.subTpe===\"Dynamic\"){\n            element = FormElementMapping.mapping[this.subTpe](meta,this.form)\n        }else {            \n            element = FormElementMapping.mapping[this.subTpe](meta,this.form,this.dependencies,this.action)\n        }\n        \n        return element\n    }\n}","import React from 'react'\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\nimport {Resizable} from \"re-resizable\";\nimport { AutoGenBaseComp } from './AutoGenBaseComp';\n\n\nexport class AutoGenEditor extends AutoGenBaseComp{\n    /**\n     * \n     * @param {AutoGenForm} form \n     */\n    constructor(props){\n        super(props)        \n        this.language = (props.values.values[0] && props.values.values[0].name) || \"python\"\n      }\n      \n      handleChange = (event)=>{        \n        this.forms[this.name]= this.editorRef.editor.getValue()\n        this.monitors.forEach(monitor=>monitor.reload(this))\n      }\n\n      render(){        \n        return (\n          <div>\n            <div>{this.name}</div>\n          <Resizable defaultSize={{height: \"500px\"}} onResize={()=>{this.editorRef.editor.resize();}}>\n          <AceEditor\n          ref={item=>this.editorRef=item}\n          mode={this.language}\n          theme=\"github\"\n          width={\"100%\"}\n          height={\"100%\"}\n          onChange={this.handleChange}\n          name=\"mlsql_editor\"\n          fontSize={16}\n          showPrintMargin={true}\n          showGutter={true}\n          highlightActiveLine={true}\n          editorProps={{\n              $blockScrolling: Infinity\n          }}\n          setOptions={{\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: false,\n              showLineNumbers: true,\n              tabSize: 2,\n              autoScrollEditorIntoView: true\n          }}\n      /></Resizable>\n      </div> \n      \n                      \n        );\n      }\n}","import React from 'react'\nimport {AutoGenInput} from './autogens/AutoGenInput'\nimport {AutoGenSelect} from './autogens/AutoGenSelect'\nimport {AutoGenCheckBox} from './autogens/AutoGenCheckBox'\nimport { AutoGenTreeView2 } from './autogens/AutoGenTreeView2'\nimport { AutoGenDynamic } from './autogens/AutoGenDynamic'\nimport { AutoGenEditor } from './autogens/AutoGenEditor'\n\nexport class FormElementMapping{\n    \n    static mapping = {\n        \"Input\":(row,form,dependencies,action)=>{\n            const input = <AutoGenInput ref={item=>form.pushInstance(item)} form={form} name={row.name} values={[]} dependencies={dependencies} action={action}></AutoGenInput> \n            return input\n        },\n        \"Select\": (row,form,dependencies,action)=>{              \n            const select = <AutoGenSelect ref={item=>form.pushInstance(item)} form={form} name={row.name} values={row.values} dependencies={dependencies} action={action}></AutoGenSelect>\n            return select\n        },\n        \"CheckBox\": (row,form,dependencies,action)=>{  \n            const checkbox = <AutoGenCheckBox ref={item=>form.pushInstance(item)} form={form} name={row.name} values={row.values} dependencies={dependencies} action={action}></AutoGenCheckBox>\n            return checkbox\n        },\n        \"TreeSelect\":(row,form,dependencies,action)=>{            \n            const tree = <AutoGenTreeView2 ref={item=>form.pushInstance(item)} form={form} name={row.name} json={JSON.parse(row.json)[0].values||[]} values={[]} dependencies={dependencies} action={action}></AutoGenTreeView2>    //(form,row.name,JSON.parse(row.json)[0].value)\n            return tree\n        },\n        \"Editor\":(row,form,dependencies,action)=>{            \n            const tree = <AutoGenEditor ref={item=>form.pushInstance(item)} form={form} name={row.name} ref={item=>form.pushInstance(item)} form={form} name={row.name} values={row.values} dependencies={dependencies} action={action}></AutoGenEditor> \n            return tree\n        },\n        \"Dynamic\":(row,form)=>{                      \n            let params = {\n                name:row.name,\n                subTpe:row.subTpe,            \n                form:form,\n                action:row.valueProviderName,\n                dependencies: row.depends,\n                row:row\n            }            \n            const dynamicComp = new AutoGenDynamic(params) \n\n            return dynamicComp.build()\n        }  \n    }\n    \n}\n","import React from 'react'\nimport {ActionProxy, ResponseKey} from '../../service/ActionProxy'\nimport { AutoGenForm } from './autogens/AutoGenForm'\nimport { FormElementMapping } from './FormElementMapping'\n\nexport class FormBuilder {\n\n    /**     \n     * @param {ActionProxy} proxy      \n     */\n    constructor(proxy,router){              \n        this.proxy = proxy  \n        this.router = router                     \n    }\n    /**     \n     * @param {string} action \n     */\n    async build(action,submit,instances){        \n        const res = await this.proxy.post(action,{\"__HELP__\":\"true\"})                \n        /**@type {[]} */\n        const json = res.content\n        \n        const form = new AutoGenForm({action:action,submit:submit,router:this.router})  \n        json.map(item=>{        \n            const autogen = FormElementMapping.mapping[item.tpe](item,form)            \n            form.push(autogen)            \n        })                \n        return form\n    }\n    \n} ","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\n\nexport default class TableView extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    this.state = { rows: [], columns: [] }\n  }\n\n\n  load = (data) => {\n    \n    if(!Array.isArray(data)){\n      data = [data]\n    }\n\n    let maxSize = 0\n    let maxSizeItem = {}\n    data.forEach(item => {\n      const wow = Object.keys(item).length\n      if (wow > maxSize) {\n        maxSize = wow\n        maxSizeItem = item\n      }\n    })\n    const columns = Object.keys(maxSizeItem) || []\n    const newData = data.map(item => {\n      columns.forEach((col, index) => {\n        const value = item[col]\n        if ((typeof value) === 'object') {\n          item[col] = JSON.stringify(value).substring(0, 300)\n        }\n        if ((typeof value) === 'array') {          \n          item[col] = value.join(\",\").substring(0, 300)\n          \n        }\n        if ((typeof value) === 'boolean') {\n          item[col] = value.toString()          \n        }\n      })\n      return item\n    })\n    this.setState({ rows: newData, columns: columns })\n  }\n\n  useStyles = () => makeStyles({\n    table: {\n      minWidth: 650,\n    }\n  });\n\n  render() {\n    const classes = this.useStyles();\n\n    const tableHeaders = this.state.columns.map(item => {\n      return <TableCell>{item}</TableCell>\n    })\n\n    const tableRows = this.state.rows.map((row) => {\n      const tableRow = this.state.columns.map(col => {\n        return <TableCell component=\"th\" scope=\"row\">{row[col]}</TableCell>\n      })\n      return <TableRow>\n        {tableRow}\n      </TableRow>\n    })\n\n    return (\n      <TableContainer component={Paper} >\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              {tableHeaders}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tableRows}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}","import React from 'react'\nimport { ActionProxy } from '../service/ActionProxy'\nimport { FormBuilder } from './api_form/Form'\nimport { makeStyles } from '@material-ui/core/styles';\nimport RemoteAction from '../service/RemoteAction'\nimport TableView from './api_form/TableView'\nimport { BaseComp } from './BaseReactComp/BaseComp';\nimport Warning from './api_form/Warning';\nimport { GlobalParamNames } from '../service/Dicts';\n\n\nexport default class APIView extends BaseComp {\n    constructor(props) {\n        super(props)\n        this.router = props.router\n        this.action = props.action        \n        if(props.submit){\n            this.submit = props.submit            \n        }else {            \n            this.submit = this.submit.bind(this)                      \n        }\n        \n        this.state = {}\n    }\n\n    useStyles = () => makeStyles(theme => ({\n        v: {\n            marginTop: theme.spacing(1),\n        },\n    }));\n\n    async submit(evt) {\n        evt.preventDefault()\n        const proxy = new ActionProxy()\n        const params = this.form.forms\n        //clean empty param\n        Object.keys(params).forEach(key=>{\n            if(!params[key]) {\n                delete params[key]\n            }            \n        })\n        const res = await proxy.backend.request(this.action, params)\n        const errorView = this.errorView\n        if(res.status !== 200){        \n            errorView.warn(\"Response error\", res.content)\n        }        \n        if (res.status ===200 && this.view) {            \n            try {\n                if(this.action === \"userLogin\"){\n                    sessionStorage.setItem(GlobalParamNames.LOGIN_TOKEN,res.content[0][\"token\"])\n                    sessionStorage.setItem(GlobalParamNames.USER_NAME,params[GlobalParamNames.USER_NAME])\n                }\n                this.view.load(res.content)\n            } catch (ex) {\n                errorView.warn(\"Data can not display in table\",res.content+\"\")\n            }\n        }\n    }\n    \n    async componentDidMount() {\n        const proxy = new ActionProxy()\n\n        const builder = new FormBuilder(proxy,this.router)\n        this.form = await builder.build(this.action, this.submit)\n\n        await this.setStateSync({ form: this.form.build() })\n\n        //configure dependency of components\n        const inputWithDepends = this.form.instances.filter(item => item.dependencies)\n        const inputAlonesMap = {}\n        this.form.instances.filter(item => !item.dependencies).forEach(item => {\n            inputAlonesMap[item.name] = item\n        })\n        inputWithDepends.forEach(item => {\n            item.dependencies.forEach(dep => {\n                inputAlonesMap[dep].addMonitor(item)\n            })\n        })\n    }\n\n    render() {\n        const classes = this.useStyles()\n        return <div>\n            <div><Warning ref={item => this.errorView = item}></Warning></div>            \n            <div>{this.state.form}</div>\n            <div style={{ marginTop: \"30px\" }}><TableView ref={(item) => this.view = item}></TableView> </div>\n        </div>\n\n    }\n\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport {BaseComp} from '../components/BaseReactComp/BaseComp'\nimport { ActionProxy } from '../service/ActionProxy';\n\nfunction ListItemLink(props) {\n    return <ListItem button component=\"a\" {...props} />;\n  }\n\nexport default class APIView extends BaseComp {\n    constructor(props) {\n        super(props)\n        this.router = props.router\n        this.action = props.action    \n        this.state = {}\n        this.handleListItemClick = this.handleListItemClick.bind(this)\n    }\n\n    useStyles = ()=> makeStyles(theme => ({\n        root: {\n          width: '100%',\n          maxWidth: 360,\n          backgroundColor: theme.palette.background.paper,\n        },\n      }));\n    \n    async handleListItemClick(evt,action){              \n        this.router.toPage2(action)\n    }\n\n    async goToNav(evt){\n       this.router.toNav() \n    }\n\n    async componentDidMount() {        \n        const proxy = new ActionProxy()\n        const resp = await proxy.get(this.action,{})\n        const children = resp.content.map((item,index)=>{\n            const comp = <ListItem key={index} button onClick={event => this.handleListItemClick(event,item.name)}>\n            <ListItemIcon>\n              <InboxIcon />\n            </ListItemIcon>\n            <ListItemText primary={item.name} />\n          </ListItem>\n            return  comp\n        })\n        await this.setStateSync({items:children})\n    }\n    \n\n    render(){      \n        const classes = this.useStyles()\n        return (\n            <div className={classes.root}>\n              <List component=\"nav\" aria-label=\"main mailbox folders\">\n              <ListItem button onClick={event => this.goToNav(event)}>\n               <ListItemIcon>\n                  <InboxIcon />\n               </ListItemIcon>\n            <ListItemText primary={\"==> Go to nav page\"} />\n          </ListItem>\n              {this.state.items}                \n              </List>                            \n            </div>\n          );\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport { ActionProxy } from \"../service/ActionProxy\";\nimport RemoteAction from \"../service/RemoteAction\"\nimport APIView from '../components/APIView';\n\nconst Step = Steps.Step;\n\nexport default class APINav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.router = props.router\n        this.state = {\n            current: 0,\n            steps:[],\n            apiNavId:props.apiNavId\n        }\n        \n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n\n    async componentDidMount() {\n        const proxy = new ActionProxy()        \n        const resp = await proxy.get(RemoteAction.LIST_APINavItems,{apiNavId:this.state.apiNavId})\n        if(resp.status === 200){            \n            const items = resp.content.map((item,index)=>{                               \n                return {\n                    title: item.title,\n                    content: ()=>{\n                    return <Card title={item.title} style={{width:\"600px\"}} bordered={true}>\n                    <APIView router={this.router} key={index}  action={item.action}></APIView>        \n                </Card>}\n                }\n            })            \n            this.setState({steps:items}) \n        }\n        \n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;    \n        if(this.state.steps.length==0){\n            return <div>No Items Available</div>\n        }    \n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.state.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                     {this.state.steps[current].content()}\n                </div>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\n\nexport class BaseRouter extends React.Component{\n    constructor(props){\n        super(props)\n        this.app = props.app\n        this.router = props.router \n        this.pages = [{func:this.toPage1,params:[]}]       \n    }\n    \n    popPage(){\n        this.pages.pop()\n        const page = this.pages.pop()\n        if(page){\n            const {func,params} = page\n            func(...params)\n        }else{\n            if(this.router){\n                this.router.popPage()\n            }else{\n                this.toPage1()\n            }           \n        }\n  \n     } \n\n     toPage1(){\n\n     }\n}","import React from 'react';\nimport APIView from '../components/APIView';\nimport APINav from '../components/APINav';\nimport RemoteAction from '../service/RemoteAction';\nimport {BaseRouter} from './BaseRouter'\n\nexport class APINavSwitcher extends BaseRouter{\n    constructor(props){\n        super(props)\n        \n        this.state={\n            page1:true,\n            page2:false,\n            apiNavId:-1\n        }\n        this.submit = this.submit.bind(this)         \n        this.toPage1 = this.toPage1.bind(this)\n        this.toPage2 = this.toPage2.bind(this)\n\n        this.pages = [{func:this.toPage1,params:[]}]\n    }\n\n    async submit(evt){\n       evt.preventDefault()\n       const params = this.apiView.form.forms       \n       this.toPage2(params[\"apiNavId\"])\n    }\n\n   toPage1 = ()=>{       \n      this.pages.push({func:this.toPage1,params:[]})\n      this.setState({page1:true,page2:false})\n   } \n\n   toPage2 = (apiNavId)=>{     \n      this.pages.push({func:this.toPage2,params:[apiNavId]})\n      this.setState({page1:false,page2:true,apiNavId:apiNavId})\n   }    \n\n   render(){      \n       if(this.state.page1){    \n        return (<div>\n           <APIView ref={item=>this.apiView=item} \n           action={RemoteAction.ChooseAPINav} \n           router={this}  submit={this.submit}></APIView>\n        </div>)\n       }     \n     else {        \n        return (<div>                  \n           <APINav router={this} apiNavId={this.state.apiNavId}></APINav>\n        </div>)\n     }\n   }\n}","import React from 'react';\nimport APIView from '../components/APIView';\nimport APIMain from '../components/APIMain';\nimport RemoteAction from '../service/RemoteAction';\nimport {APINavSwitcher} from '../router/APINavSwitcher'\nimport {BaseRouter} from './BaseRouter'\n\nexport class APIViewSwitcher extends BaseRouter{\n    constructor(props){\n        super(props)        \n        this.state={\n            page1:true,\n            page2:false,\n            nav:false,\n            current_action:RemoteAction.LIST_ACTIONS \n        }      \n        this.toPage1 = this.toPage1.bind(this)\n        this.toPage2 = this.toPage2.bind(this)\n        this.toNav = this.toNav.bind(this)\n        this.popPage = this.popPage.bind(this)\n\n        this.pages = [{func:this.toPage1,params:[]}]\n    }\n\n   toPage1 = ()=>{\n      this.pages.push({func:this.toPage1,params:[]})\n      this.setState({page1:true,page2:false,nav:false,})\n   } \n\n   toPage2 = (action)=>{\n      this.pages.push({func:this.toPage2,params:[action]})      \n      this.setState({page1:false,page2:true,nav:false,current_action:action})\n   }  \n   \n   toNav = ()=>{\n      this.pages.push({func:this.toNav,params:[]})      \n      this.setState({page1:false,page2:false,nav:true})\n   }\n\n   render(){      \n       if(this.state.page1){\n        return (<div>\n           <APIMain router={this} action={RemoteAction.LIST_ACTIONS}></APIMain>\n        </div>)\n       }     \n     else if(this.state.page2) {\n        return (<div>\n           <APIView  router={this} action={this.state.current_action}></APIView>        \n        </div>)\n     }else if(this.state.nav){        \n      return (<div>\n         <APINavSwitcher router={this} app={this.app}></APINavSwitcher>        \n      </div>)\n     }\n   }\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { APIViewSwitcher } from './router/APIViewSwitcher';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <APIViewSwitcher app={this}></APIViewSwitcher>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}